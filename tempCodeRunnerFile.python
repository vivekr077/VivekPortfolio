import os
import re
import requests
from urllib.parse import urlparse

# ---------------------------
# CONFIGURATION
# ---------------------------
DOWNLOAD_FOLDER = "resumes"

# ---------------------------
# FUNCTION TO DOWNLOAD PDF
# ---------------------------
def download_pdf(drive_url, save_path):
    """
    Download PDF from Google Drive URL
    Handles both direct download and confirmation token scenarios
    """
    # Extract file ID from Google Drive link
    match = re.search(r"/d/([a-zA-Z0-9_-]+)", drive_url)
    if not match:
        print(f"‚ùå Invalid Drive URL: {drive_url}")
        return False
    
    file_id = match.group(1)
    download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
    
    try:
        # First request to get the file
        session = requests.Session()
        response = session.get(download_url, stream=True)
        
        # Check if we need to handle the confirmation token for large files
        if "download_warning" in response.cookies:
            params = {'id': file_id, 'confirm': response.cookies['download_warning']}
            response = session.get(download_url, params=params, stream=True)
        
        # Check if the response is actually a PDF
        content_type = response.headers.get('content-type', '')
        if response.status_code == 200:
            # Verify it's actually a PDF file
            if 'application/pdf' not in content_type and not content_type.startswith('application/octet-stream'):
                # Sometimes PDFs are served as octet-stream
                print(f"‚ö†Ô∏è  Warning: Content type is {content_type}, may not be a PDF")
            
            with open(save_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            # Verify file was created and has content
            if os.path.exists(save_path) and os.path.getsize(save_path) > 0:
                print(f"‚úÖ Downloaded: {save_path} ({os.path.getsize(save_path)} bytes)")
                return True
            else:
                print(f"‚ùå Downloaded file is empty or wasn't created: {save_path}")
                return False
        else:
            print(f"‚ùå Failed to download {drive_url} (Status: {response.status_code})")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Network error downloading {drive_url}: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error downloading {drive_url}: {str(e)}")
        return False

# ---------------------------
# FUNCTION TO VALIDATE DRIVE URL
# ---------------------------
def validate_drive_url(url):
    """Validate if the URL is a proper Google Drive sharing link"""
    pattern = r'https://drive\.google\.com/file/d/[a-zA-Z0-9_-]+/view'
    return bool(re.match(pattern, url))

# ---------------------------
# MAIN SCRIPT
# ---------------------------
def main():
    drive_links = [
        # üîΩ Replace with your actual Google Drive links
        "https://drive.google.com/file/d/1N_UeRPx1k3b6kZqIbXdhci9PBXnRlcQT/view?usp=sharing"
    ]
    
    # Create download folder if it doesn't exist
    if not os.path.exists(DOWNLOAD_FOLDER):
        os.makedirs(DOWNLOAD_FOLDER)
        print(f"üìÅ Created folder: {DOWNLOAD_FOLDER}")
    
    successful_downloads = 0
    total_links = len(drive_links)
    
    print(f"üöÄ Starting download of {total_links} files...")
    
    for i, url in enumerate(drive_links, start=1):
        print(f"\nüìÑ Processing file {i}/{total_links}")
        
        # Validate URL format
        if not validate_drive_url(url):
            print(f"‚ùå Invalid Google Drive URL format: {url}")
            continue
        
        save_path = os.path.join(DOWNLOAD_FOLDER, f"resume_{i}.pdf")
        
        # Skip if file already exists
        if os.path.exists(save_path):
            print(f"‚ö†Ô∏è  File already exists: {save_path}")
            continue
        
        if download_pdf(url, save_path):
            successful_downloads += 1
    
    print(f"\nüéâ Download complete! {successful_downloads}/{total_links} files downloaded successfully.")
    
    if successful_downloads < total_links:
        print("\nüí° Tips for failed downloads:")
        print("   ‚Ä¢ Make sure the Google Drive links are publicly accessible")
        print("   ‚Ä¢ Check that the files are actually PDFs")
        print("   ‚Ä¢ For large files, Google Drive may require manual download")

if __name__ == "__main__":
    main()